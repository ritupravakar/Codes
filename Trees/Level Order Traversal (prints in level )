from collections import defaultdict
from collections import deque
class Graph:
    def __init__(self,V):
        self.V=V
        self.graph=defaultdict(list)

    def addEdge(self,u,v):
        self.graph[u].append(v)
        #self.graph[v].append(u)

    def LevelOrder(self,s):
        k=1
        if s is None:
            return
        queue=[]
        queue.append(s)
        queue.append(None)
        #appending None to differentiate between levels
       # print(queue)
        while(len(queue)>0):
            #print(queue[0],end=" ")
            s=queue.pop(0)
            if not s and k<=self.V:
                print()
                queue.append(None)
            else:
                if s :
                    print(s,end=" ")
                k+=1
                if s and self.graph[s][0]!=-1 :
                    queue.append(self.graph[s][0])
                if s and self.graph[s][1]!=-1 :
                    queue.append(self.graph[s][1])

            #print(queue)

n=int(input())
g=Graph(n)
for i in range(n):
    a,b=input().split(" ")
    a=int(a)
    b=int(b)
    g.addEdge(i+1,a)
    g.addEdge(i+1,b)

g.LevelOrder(1)

------------------------------------------------------------------------------

7
2 3
4 5
6 7
-1 -1
-1 -1
-1 -1
-1 -1
1 
2 3 
4 5 6 7



