from collections import defaultdict
from collections import deque
import collections
class Graph:
    def __init__(self,V):
        self.V=V
        self.graph=defaultdict(list)

    def addEdge(self,u,v):
        self.graph[u].append(v)
        #self.graph[v].append(u)

    def VerticalOrder(self,s):
        if s is None:
            return
        queue=[]
        m={}
        d={}
        queue.append(s)
        d[s]=0
        m[0]=[s]
        while len(queue)>0 :

            s=queue.pop(0)

            if self.graph[s][0]!=-1:
                queue.append(self.graph[s][0])
                d[self.graph[s][0]]=d[s]-1
                k=d[self.graph[s][0]]
                if m.get(k) is None :
                    m[k]=[]
                m[k].append(self.graph[s][0])

            if self.graph[s][1]!=-1:
                queue.append(self.graph[s][1])
                d[self.graph[s][1]]=d[s]+1
                k=d[self.graph[s][1]]
                if m.get(k) is None :
                    m[k]=[]
                m[k].append(self.graph[s][1])


        sorted_m=collections.OrderedDict(sorted(m.items()))
       # print(self.graph)
       # print(m)
       # print(d)
       # print(sorted_m)
        for i in sorted_m.values():
            for j in i:
                print(j," ",end=" ")
            print()

n=int(input())
g=Graph(n)
for i in range(n):
    a,b=input().split(" ")
    a=int(a)
    b=int(b)
    g.addEdge(i+1,a)
    g.addEdge(i+1,b)

g.VerticalOrder(1)

----------------------------------------------------------------------------

6
2 3
-1 -1
4 -1
-1 5
-1 6
-1 -1

o/p :
2   
1   4   
3   5   
6 
