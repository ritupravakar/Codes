class Node:
    def __init__(self,info):
        self.info=info
        self.left=None
        self.right=None
        self.level=None
    def str(self):
        return str(self.info)

class BinarySearchTree:
    def __init__(self):
        self.root=None

    def create(self,val):

        if self.root==None:
            self.root=Node(val)
        else:
            current=self.root
            while True:
                if val<current.info:
                    if current.left:
                        current=current.left
                    else:
                        current.left=Node(val)
                        break

                elif val>current.info:
                        if current.right:
                            current=current.right
                        else:
                            current.right=Node(val)
                            break
                else:
                    break


    def isFull(self,root):
        if root is None:
            return True
        if root.left is None and root.right is None :
            return  True
        if root.left is not None and root.right is not None :
            return self.isFull(root.left) and self.isFull(root.right)

        return False

    def check(self):
       # print(self.root.info)
        return self.isFull(self.root)


tree=BinarySearchTree()
n=int(input())
l=list(map(int,input().split(",")))
for i in range(n):
    tree.create(l[i])

print(tree.check())

------------------------------------------------------------------------------
1)
7
20,8,22,4,12,10,14
o/p :
True
2)
8
20,8,22,4,12,10,14,2
o/p :
False
