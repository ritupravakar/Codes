from collections import defaultdict
from collections import deque
import collections


class Graph:
    def __init__(self, V):
        self.V = V
        self.graph = defaultdict(list)

    def addEdge(self, u, v):
        self.graph[u].append(v)
        # self.graph[v].append(u)


def isIsomorphic( s1, s2,g1,g2):
    if s1 == -1 and s2 == -1:
        return True
    if s1 == -1 or s2 == -1:
        return False
    if s1 != s2:
        return False
    return ((isIsomorphic(g1.graph[s1][0], g2.graph[s2][0],g1,g2) and
             (isIsomorphic(g1.graph[s1][1], g2.graph[s2][1],g1,g2))) or
            (isIsomorphic(g1.graph[s1][0], g2.graph[s2][1],g1,g2) and
             (isIsomorphic(g1.graph[s1][1],g2.graph[s2][0],g1,g2)))
            )



n1 = int(input())
g1 = Graph(n1)


for i in range(n1):
    a, b = input().split(" ")
    a = int(a)
    b = int(b)
    g1.addEdge(i + 1, a)
    g1.addEdge(i + 1, b)

n2 = int(input())
g2 = Graph(n2)

for i in range(n2):
    a, b = input().split(" ")
    a = int(a)
    b = int(b)
    g2.addEdge(i + 1, a)
    g2.addEdge(i + 1, b)

print(isIsomorphic(1,1,g1,g2))
--------------------------------------------------------

3
2 3
-1 -1
-1 -1
4 
2 3
-1 -1
4 -1
-1 -1
o/p :
False

---------------------------------------------------------

3
2 3
-1 -1
-1 -1
3
2 3
-1 -1
-1 -1
o/p :
True
