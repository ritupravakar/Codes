from collections import defaultdict
from collections import deque
class Graph:
    def __init__(self,V):
        self.V=V
        self.graph=defaultdict(list)

    def addEdge(self,u,v):
        self.graph[u].append(v)
        #self.graph[v].append(u)

    def topView(self,s):
        if s is None:
            return

        q=deque()
        sets=set({})
        topview=[]
        q.append((s,0))
       # print(self.graph)
        while q:
            s,hd=q.popleft()

            if hd not in sets:
                topview.append((s,hd))
                sets.add(hd)
            if self.graph[s][0] !=-1:
                q.append((self.graph[s][0],hd-1))
            if self.graph[s][1]!=-1 :
                q.append((self.graph[s][1],hd+1))

        t=sorted(topview,key=lambda x:x[1])
        #print(q)
        #print(topview)
        for i in t:
            print(i[0],end=' ')

n=int(input())
g=Graph(n)
for i in range(n):
    a,b=input().split(" ")
    a=int(a)
    b=int(b)
    g.addEdge(i+1,a)
    g.addEdge(i+1,b)

g.topView(1)

------------------------------------------------------------
6
2 3
-1 -1
4 -1
-1 5
-1 6
-1 -1
o/p :
2 1 3 6 

